{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Moru\\\\react-flask\\\\src\\\\components\\\\form.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport app from \".../firebase.js\";\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\nimport { isWebUrl } from \"valid-url\";\nimport OverlayTrigger from \"react-bootstrap/Overlay/Trigger\";\nimport ToolTip from \"react-bootstrap/ToolTip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = getDatabase();\nconst data = {\n  longUrl: \"\",\n  preferedAlias: \"\",\n  generatedUrl: \"\",\n  loading: false,\n  errors: {},\n  toolTipMessage: \"Copy to Clipboard\"\n};\nexport const Form = () => {\n  _s();\n\n  const [formData, setFormData] = useState(data);\n\n  const handleChange = e => {\n    const {\n      id,\n      value\n    } = e.target();\n    setFormData({ ...formData,\n      [id]: value\n    });\n  };\n\n  const validateFormInput = () => {\n    let errors = {};\n\n    if (formData.longUrl.length === 0) {\n      errors.longUrl = \"This field cannot be Empty.\";\n    } else if (!isWebUrl(formData.longUrl.length)) {\n      errors.longUrl = \"Please Enter a Valid Url.\";\n    }\n\n    if (formData.preferedAlias !== \"\") {\n      if (formData.preferedAlias.length > 7) {\n        errors.preferedAlias = \"The length of this field cannot be more than 7\";\n      } else if (formData.preferedAlias.indexOf(\" \") !== -1) {\n        errors.preferedAlias = \"You cannot have spaces in this field.\";\n      }\n\n      const keyExist = checkKeyExist();\n\n      if (keyExist & !(errors.preferedAlias in errors)) {\n        errors.preferedAlias = \"This Alias already Exist. Please Enter a new one.\";\n      }\n    }\n\n    setFormData({ ...formData,\n      errors: errors\n    });\n\n    if (errors.keys().length !== 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setFormData({ ...data,\n      loading: true,\n      generatedUrl: \"\"\n    });\n    const isFormValid = await validateFormInput();\n\n    if (!isFormValid) {} // Generate generated URL\n\n\n    let generatedKey = nanoid(5);\n    let generatedUrl = \"sanjeev.com/\" + generatedKey;\n\n    if (formData.preferedAlias) {\n      generatedKey = formData.preferedAlias;\n      generatedUrl = \"sanjeev.com/\" + generatedKey;\n    } // Add to Database\n\n\n    const result = await set(ref(db, \"/\" + generatedKey), {\n      generatedKey,\n      generatedUrl: generatedUrl,\n      preferedAlias: formData.preferedAlias,\n      longUrl: formData.longUrl\n    }); // Once added to Database, update Local State.\n\n    setFormData({ ...formData,\n      generatedUrl: generatedUrl,\n      loading: false\n    });\n  };\n\n  const hasError = key => {\n    return key in formData.errorMessage;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Form\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Form, \"5Xe+7XVdvjRG1GlUIKpskI5oi0Y=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","nanoid","app","getDatabase","child","ref","set","get","isWebUrl","OverlayTrigger","ToolTip","db","data","longUrl","preferedAlias","generatedUrl","loading","errors","toolTipMessage","Form","formData","setFormData","handleChange","e","id","value","target","validateFormInput","length","indexOf","keyExist","checkKeyExist","keys","handleSubmit","preventDefault","isFormValid","generatedKey","result","hasError","key","errorMessage"],"sources":["C:/Users/Acer/Desktop/Moru/react-flask/src/components/form.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport app from \".../firebase.js\";\r\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\r\nimport { isWebUrl } from \"valid-url\";\r\nimport OverlayTrigger from \"react-bootstrap/Overlay/Trigger\";\r\nimport ToolTip from \"react-bootstrap/ToolTip\";\r\n\r\nconst db = getDatabase();\r\n\r\nconst data = {\r\n  longUrl: \"\",\r\n  preferedAlias: \"\",\r\n  generatedUrl: \"\",\r\n  loading: false,\r\n  errors: {},\r\n  toolTipMessage: \"Copy to Clipboard\",\r\n};\r\n\r\nexport const Form = () => {\r\n  const [formData, setFormData] = useState(data);\r\n\r\n  const handleChange = (e) => {\r\n    const { id, value } = e.target();\r\n    setFormData({ ...formData, [id]: value });\r\n  };\r\n\r\n  const validateFormInput = () => {\r\n    let errors = {};\r\n\r\n    if (formData.longUrl.length === 0) {\r\n      errors.longUrl = \"This field cannot be Empty.\";\r\n    } else if (!isWebUrl(formData.longUrl.length)) {\r\n      errors.longUrl = \"Please Enter a Valid Url.\";\r\n    }\r\n\r\n    if (formData.preferedAlias !== \"\") {\r\n      if (formData.preferedAlias.length > 7) {\r\n        errors.preferedAlias = \"The length of this field cannot be more than 7\";\r\n      } else if (formData.preferedAlias.indexOf(\" \") !== -1) {\r\n        errors.preferedAlias = \"You cannot have spaces in this field.\";\r\n      }\r\n\r\n      const keyExist = checkKeyExist();\r\n\r\n      if (keyExist & !(errors.preferedAlias in errors)) {\r\n        errors.preferedAlias =\r\n          \"This Alias already Exist. Please Enter a new one.\";\r\n      }\r\n    }\r\n\r\n    setFormData({ ...formData, errors: errors });\r\n\r\n    if (errors.keys().length !== 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormData({ ...data, loading: true, generatedUrl: \"\" });\r\n    const isFormValid = await validateFormInput();\r\n\r\n    if (!isFormValid) {\r\n    }\r\n\r\n    // Generate generated URL\r\n    let generatedKey = nanoid(5);\r\n    let generatedUrl = \"sanjeev.com/\" + generatedKey;\r\n\r\n    if (formData.preferedAlias) {\r\n      generatedKey = formData.preferedAlias;\r\n      generatedUrl = \"sanjeev.com/\" + generatedKey;\r\n    }\r\n\r\n    // Add to Database\r\n    const result = await set(ref(db, \"/\" + generatedKey), {\r\n      generatedKey,\r\n      generatedUrl: generatedUrl,\r\n      preferedAlias: formData.preferedAlias,\r\n      longUrl: formData.longUrl,\r\n    });\r\n\r\n    // Once added to Database, update Local State.\r\n    setFormData({ ...formData, generatedUrl: generatedUrl, loading: false });\r\n  };\r\n\r\n  const hasError = (key) => {\r\n    return key in formData.errorMessage;\r\n  };\r\n\r\n  return <h1>Form</h1>;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}